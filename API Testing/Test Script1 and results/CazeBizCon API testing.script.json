{
	"info": {
		"_postman_id": "6a431c1e-c4cc-494e-96bc-d7a7b40ab7a3",
		"name": "BizCon API orgnl",
		"description": "API for BizCon Admin and User Chat.\n- Public endpoints are accessible to anyone\n- User chat endpoints are accessible by UUID\n- Admin endpoints are restricted to localhost\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39667197",
		"_collection_link": "https://automators-4519.postman.co/workspace/Automators-Workspace~2d92b09c-ff01-4c43-8a6c-d63de766f3fb/collection/39667197-6a431c1e-c4cc-494e-96bc-d7a7b40ab7a3?action=share&source=collection_link&creator=39667197"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "send email when no lead found",
					"item": [
						{
							"name": "no lead found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test that the response status is 200\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test that the response has Content-Type header for JSON\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
											"    pm.expect(contentType).to.match(/application\\/json/);\r",
											"});\r",
											"\r",
											"// Parse the response JSON\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"// Validate that the response is an object\r",
											"pm.test(\"Response is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Check the 'success' field is false\r",
											"pm.test(\"Success flag is false\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"success\", false);\r",
											"});\r",
											"\r",
											"// Check the 'results' field is an empty array\r",
											"pm.test(\"Results array is empty\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"results\").that.is.an(\"array\").that.is.empty;\r",
											"});\r",
											"\r",
											"// Check the 'error' message\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"error\", \"No leads file found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"lead_ids\": [\n    \"1\"\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/send_emails",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"send_emails"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "upload",
					"item": [
						{
							"name": "company-files",
							"item": [
								{
									"name": "Upload company PDF files",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has valid structure\", () => {\r",
													"    const response = pm.response.json();\r",
													"    console.log(response);\r",
													"    pm.expect(response).to.have.property('results').that.is.an('array');\r",
													"    pm.expect(response).to.have.property('success').that.is.a('boolean');\r",
													"});\r",
													"\r",
													"// Loop through results array to validate each file upload result\r",
													"pm.test(\"Results array items contain valid file and status\", () => {\r",
													"    const response = pm.response.json();\r",
													"    response.results.forEach(result => {\r",
													"        pm.expect(result).to.have.property('file').that.is.a('string');\r",
													"        pm.expect(result).to.have.property('status').that.is.a('string')\r",
													"          .and.satisfy(status => ['success', 'file_exists'].includes(status));\r",
													"    });\r",
													"});\r",
													"// Validate Content-Type header\r",
													"pm.test(\"Content-Type header is application/json\", () => {\r",
													"    // Allow for extra charset info if necessary\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
													"});\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "files",
													"type": "file",
													"src": "{{valid_file}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/upload/company-files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"upload",
												"company-files"
											]
										}
									},
									"response": []
								},
								{
									"name": "company file already exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", () => {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Response should indicate duplicate if success is false\", () => {\r",
													"    const response = pm.response.json();\r",
													"\r",
													"    pm.expect(response).to.have.property(\"success\").that.is.a(\"boolean\");\r",
													"\r",
													"    if (!response.success) {\r",
													"        response.results.forEach(result => {\r",
													"            pm.expect(result.status).to.equal('duplicate', `File should exist: ${result.file}`);\r",
													"        });\r",
													"    } else {\r",
													"        console.warn(\"Success flag is true. Test logic may need review.\");\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());\r",
													"\r",
													"// Log the value of 'valid_file' environment variable\r",
													"console.log(\"Valid file for upload: \" + pm.environment.get(\"valid_file\"));\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "files",
													"type": "file",
													"src": "{{valid_file}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/upload/company-files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"upload",
												"company-files"
											]
										}
									},
									"response": []
								},
								{
									"name": "upload multiple company PDF files",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test that the HTTP status code is 200\r",
													"pm.test(\"Status code is 409\", () => {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"// Validate the overall response structure\r",
													"pm.test(\"Response structure is valid\", () => {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.be.an(\"object\");\r",
													"    // Check that the response has a success flag set to true\r",
													"    pm.expect(response).to.have.property(\"success\", true);\r",
													"    // Check that the results property exists and is an array\r",
													"    pm.expect(response).to.have.property(\"results\").that.is.an(\"array\");\r",
													"});\r",
													"\r",
													"// Test each file result in the results array\r",
													"pm.test(\"Each file result has valid properties\", () => {\r",
													"    const response = pm.response.json();\r",
													"    \r",
													"    response.results.forEach((result, index) => {\r",
													"        pm.test(`Result ${index + 1} properties validity`, () => {\r",
													"            // Validate the file name field\r",
													"            pm.expect(result).to.have.property(\"file\").that.is.a(\"string\");\r",
													"            // Validate the status field is either \"success\" or \"error\"\r",
													"            pm.expect(result).to.have.property(\"status\").that.is.a(\"string\")\r",
													"                .and.satisfy((status) => [\"success\", \"error\"].includes(status));\r",
													"            // If the status is error, the error field should exist as a non-empty string\r",
													"            if(result.status === \"error\") {\r",
													"                pm.expect(result).to.have.property(\"error\").that.is.a(\"string\");\r",
													"                pm.expect(result.error.length).to.be.above(0);\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"});\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "files",
													"type": "file",
													"src": [
														"{{multi_file1}}",
														"{{multi_file2}}"
													]
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/upload/company-files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"upload",
												"company-files"
											]
										}
									},
									"response": []
								},
								{
									"name": "company filetype validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate that the response status is 400 (Bad Request)\r",
													"pm.test(\"Status code is 422\", () => {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"// Validate that the response has 'results' array and proper error message\r",
													"pm.test(\"Error response structure is valid\", () => {\r",
													"    const response = pm.response.json();\r",
													"\r",
													"    // Check that 'results' is an array and has at least one item\r",
													"    pm.expect(response).to.have.property(\"results\").that.is.an(\"array\").with.length.above(0);\r",
													"\r",
													"    const firstResult = response.results[0];\r",
													"\r",
													"    // Check that the first result has the 'error' property which is a non-empty string\r",
													"    pm.expect(firstResult).to.have.property(\"error\").that.is.a(\"string\").and.not.empty;\r",
													"\r",
													"    // Optional: You can also validate that the error message matches the expected text\r",
													"    pm.expect(firstResult.error).to.eql(\"Only PDF, DOC, and DOCX files are supported\");\r",
													"\r",
													"    // Optional: Check the 'status' is 'error'\r",
													"    pm.expect(firstResult).to.have.property(\"status\", \"error\");\r",
													"});\r",
													"console.log(\"Full Response Body: \" + pm.response.text());\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "files",
													"type": "file",
													"src": "{{valid_lead}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/upload/company-files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"upload",
												"company-files"
											]
										}
									},
									"response": []
								},
								{
									"name": "no company file upload",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate that the response status is 400 (Bad Request)\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"// Validate that the response follows the ErrorResponse schema\r",
													"pm.test(\"Error response structure is valid\", () => {\r",
													"    const response = pm.response.json();\r",
													"    // The ErrorResponse should contain an \"error\" property that is a non-empty string\r",
													"    pm.expect(response).to.have.property(\"error\").that.is.a(\"string\");\r",
													"    pm.expect(response.error.length).to.be.above(0);\r",
													"});\r",
													"console.log(\"Full Response Body: \" + pm.response.text());\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "files",
													"type": "file",
													"src": [],
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/upload/company-files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"upload",
												"company-files"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "company-urls",
							"item": [
								{
									"name": "Upload company URLs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate HTTP status code is 200\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Validate response structure and that the operation was successful\r",
													"pm.test(\"Response has valid structure\", () => {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.property(\"success\", true);\r",
													"    pm.expect(response).to.have.property(\"results\").that.is.an(\"array\");\r",
													"    response.results.forEach((result) => {\r",
													"        pm.expect(result).to.have.property(\"url\").that.is.a(\"string\");\r",
													"        pm.expect(result).to.have.property(\"status\").that.is.a(\"string\");\r",
													"        // In a successful scenario, each URL should be uploaded successfully\r",
													"        pm.expect(result.status).to.equal(\"success\", `Expected success for URL: ${result.url}`);\r",
													"    });\r",
													"});\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"urls\": [\n    \"https://www.cazelabs.com/\"\n  ]\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/upload/company-urls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"upload",
												"company-urls"
											]
										}
									},
									"response": []
								},
								{
									"name": "upload multiple company URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Multiple URLs upload returns successful response\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.success).to.be.true;\r",
													"    pm.expect(jsonData.results).to.be.an(\"array\");\r",
													"\r",
													"    jsonData.results.forEach(function(result) {\r",
													"        pm.expect(result).to.have.property(\"url\");\r",
													"        pm.expect(result).to.have.property(\"status\");\r",
													"    });\r",
													"});\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"urls\": [\n    \"https://www.cazelabs.com/caze-data-sense-2/\",\n    \"https://www.cazelabs.com/caze-cost-sense-2/\"\n  ]\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/upload/company-urls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"upload",
												"company-urls"
											]
										}
									},
									"response": []
								},
								{
									"name": "upload alreadt exist company URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates company URL already exists\", () => {\r",
													"    const response = pm.response.json();\r",
													"    \r",
													"    pm.expect(response).to.have.property(\"success\", true);\r",
													"    pm.expect(response).to.have.property(\"results\").that.is.an(\"array\");\r",
													"\r",
													"    let hasFileExists = false;\r",
													"\r",
													"    response.results.forEach((result, index) => {\r",
													"        pm.test(`Result ${index} has expected properties`, () => {\r",
													"            pm.expect(result).to.have.property(\"url\").that.is.a(\"string\");\r",
													"            pm.expect(result).to.have.property(\"status\").that.is.a(\"string\");\r",
													"        });\r",
													"\r",
													"        if (result.status === \"file_exists\") {\r",
													"            hasFileExists = true;\r",
													"        }\r",
													"    });\r",
													"\r",
													"    // Fail the parent test if no file_exists was found\r",
													"    pm.expect(hasFileExists).to.be.true;\r",
													"});\r",
													"\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"urls\": [\n    \"https://www.cazelabs.com/\"\n  ]\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/upload/company-urls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"upload",
												"company-urls"
											]
										}
									},
									"response": []
								},
								{
									"name": "upload invalid company URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test Script for 400 Bad Request\r",
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"jsonData.results.forEach((item, index) => {\r",
													"    pm.test(`Result ${index + 1} contains error and url`, function () {\r",
													"        pm.expect(item).to.have.property(\"error\").that.is.a(\"string\");\r",
													"        pm.expect(item).to.have.property(\"url\").that.is.a(\"string\");\r",
													"        pm.expect(item).to.have.property(\"status\").that.equals(\"error\");\r",
													"    });\r",
													"});\r",
													"pm.test(\"Response has success false\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(false);\r",
													"});\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"urls\": [\n    \"https://\"\n  ]\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/upload/company-urls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"upload",
												"company-urls"
											]
										}
									},
									"response": []
								},
								{
									"name": "No company URL  provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"// Check the error response structure\r",
													"pm.test(\"Error response is correct\", () => {\r",
													"    const response = pm.response.json();\r",
													"\r",
													"    pm.expect(response).to.have.property(\"error\", \"No URLs provided\");\r",
													"});\r",
													"\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"urls\": [\n  ]\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/upload/company-urls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"upload",
												"company-urls"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "user-files",
							"item": [
								{
									"name": "Upload user (leads) files",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that status code is 200\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Check that success is true\r",
													"pm.test(\"Response contains success = true\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
													"});\r",
													"\r",
													"// Check the structure of the results array\r",
													"pm.test(\"Results array contains file upload details\", function () {\r",
													"    const results = pm.response.json().results;\r",
													"    pm.expect(results).to.be.an(\"array\");\r",
													"    results.forEach((item) => {\r",
													"        pm.expect(item).to.have.property(\"file\").that.is.a(\"string\");\r",
													"        pm.expect(item).to.have.property(\"status\").that.is.oneOf([\"success\", \"error\"]);\r",
													"        pm.expect(item).to.have.property(\"message\").that.is.a(\"string\");\r",
													"\r",
													"        // Optional: Check if the message mentions the number of leads (if you want to validate that)\r",
													"        if (item.status === \"success\") {\r",
													"            pm.expect(item.message).to.match(/Successfully processed \\d+ leads from/);\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());\r",
													"\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "files",
													"type": "file",
													"src": "{{valid_lead}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/upload/user-files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"upload",
												"user-files"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid user (leads) files",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"file in 'results' has 'error' status and message\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.results.length).to.be.at.least(1); // Ensure there's at least one result\r",
													"    \r",
													"    const firstResult = jsonData.results[0];\r",
													"    pm.expect(firstResult).to.have.property(\"status\").that.is.eql(\"error\");\r",
													"    pm.expect(firstResult).to.have.property(\"error\").that.is.a(\"string\");\r",
													"    pm.expect(firstResult.error).to.include(\"No valid leads found in the file\");\r",
													"    pm.expect(firstResult).to.have.property(\"file\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "files",
													"type": "file",
													"src": "{{invalid_lead}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/upload/user-files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"upload",
												"user-files"
											]
										}
									},
									"response": []
								},
								{
									"name": "user (leads) files  type validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if status code is 200\r",
													"pm.test(\"Status code is 422\", () => {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"// Check that the response has 'success' as true\r",
													"pm.test(\"API responded successfully (even with file-level error)\", () => {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.property(\"success\", true);\r",
													"});\r",
													"\r",
													"// Check that results array is present and contains at least one item\r",
													"pm.test(\"Results array is present\", () => {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.property(\"results\").that.is.an(\"array\").that.is.not.empty;\r",
													"});\r",
													"\r",
													"// Validate each result object\r",
													"const response = pm.response.json();\r",
													"response.results.forEach((result, index) => {\r",
													"    pm.test(`Result ${index} has expected error structure`, () => {\r",
													"        pm.expect(result).to.have.property(\"error\").that.is.a(\"string\");\r",
													"        pm.expect(result).to.have.property(\"file\").that.is.a(\"string\");\r",
													"        pm.expect(result).to.have.property(\"status\", \"error\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "files",
													"type": "file",
													"src": "{{valid_file}}"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/upload/user-files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"upload",
												"user-files"
											]
										}
									},
									"response": []
								},
								{
									"name": "No user (leads) files  provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if status code is 200\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", () => {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.property(\"error\", \"No files provided\");\r",
													"});\r",
													"\r",
													"// Optional: Log full response for debug\r",
													"console.log(\"Full Response Body: \" + pm.response.text());\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "files",
													"type": "file",
													"src": [],
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/upload/user-files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"upload",
												"user-files"
											]
										}
									},
									"response": []
								},
								{
									"name": "Multiple  user (leads) upload",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if status code is 200\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Check if success flag is true\r",
													"pm.test(\"Response indicates success\", () => {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.property(\"success\", true);\r",
													"});\r",
													"\r",
													"// Check that results array exists and is not empty\r",
													"pm.test(\"Results array is present and not empty\", () => {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.property(\"results\").that.is.an(\"array\").that.is.not.empty;\r",
													"});\r",
													"\r",
													"// Validate each result object\r",
													"const response = pm.response.json();\r",
													"response.results.forEach((result, index) => {\r",
													"    pm.test(`Result ${index} has expected properties`, () => {\r",
													"        pm.expect(result).to.have.property(\"file\").that.is.a(\"string\");\r",
													"        pm.expect(result).to.have.property(\"message\").that.is.a(\"string\");\r",
													"        pm.expect(result).to.have.property(\"status\", \"success\");\r",
													"        // Optional: You can verify that the message mentions the correct file\r",
													"        pm.expect(result.message).to.include(result.file);\r",
													"    });\r",
													"});\r",
													"\r",
													"//Optional: Log the full response for debugging\r",
													"console.log(\"Full Response Body: \" + pm.response.text());\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "files",
													"type": "file",
													"src": [
														"{{lead1}}",
														"{{lead2}}"
													]
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/upload/user-files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"upload",
												"user-files"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "leads",
					"item": [
						{
							"name": "Get grouped leads",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test that the response status is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test that the response has Content-Type header for JSON\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
											"    pm.expect(contentType).to.match(/application\\/json/);\r",
											"});\r",
											"// Parse the response JSON\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"// Validate that the response is an object\r",
											"pm.test(\"Response is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Iterate over each property in the response (each group of leads)\r",
											"Object.keys(jsonData).forEach(group => {\r",
											"    pm.test(`Group \"${group}\" should be an array`, function () {\r",
											"        pm.expect(jsonData[group]).to.be.an(\"array\");\r",
											"    });\r",
											"    \r",
											"    // For each Lead object in the group, perform validations\r",
											"    jsonData[group].forEach((lead, index) => {\r",
											"        pm.test(`Lead ${index + 1} in group \"${group}\" has valid structure`, function () {\r",
											"            pm.expect(lead).to.be.an(\"object\");\r",
											"            \r",
											"            // Validate required fields (adjust as necessary)\r",
											"            pm.expect(lead).to.have.property(\"id\").that.is.a(\"string\");\r",
											"            pm.expect(lead).to.have.property(\"name\").that.is.a(\"string\");\r",
											"            pm.expect(lead).to.have.property(\"company\").that.is.a(\"string\");\r",
											"            pm.expect(lead).to.have.property(\"email\").that.is.a(\"string\");\r",
											"            pm.expect(lead).to.have.property(\"source\").that.is.a(\"string\");\r",
											"            \r",
											"            // Optional fields: validate if present\r",
											"            if (lead.hasOwnProperty(\"email_sent\")) {\r",
											"                pm.expect(lead.email_sent).to.be.a(\"boolean\");\r",
											"            }\r",
											"            if (lead.hasOwnProperty(\"email_sent_count\")) {\r",
											"                pm.expect(lead.email_sent_count).to.be.a(\"number\");\r",
											"            }\r",
											"            if (lead.hasOwnProperty(\"last_email_sent\")) {\r",
											"                pm.expect(lead.last_email_sent).to.be.a(\"string\");\r",
											"            }\r",
											"            if (lead.hasOwnProperty(\"private_link\")) {\r",
											"                pm.expect(lead.private_link).to.be.a(\"string\");\r",
											"            }\r",
											"            if (lead.hasOwnProperty(\"status\")) {\r",
											"                pm.expect(lead.status).to.be.oneOf([\"Hot\", \"Warm\", \"Cold\", \"Not Responded\"]);\r",
											"            }\r",
											"            if (lead.hasOwnProperty(\"chat_summary\")) {\r",
											"                pm.expect(lead.chat_summary).to.be.a(\"string\");\r",
											"            }\r",
											"            if (lead.hasOwnProperty(\"connected\")) {\r",
											"                pm.expect(lead.connected).to.be.a(\"boolean\");\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Response should not be empty\", function () {\r",
											"    pm.expect(Object.keys(jsonData).length).to.be.above(0, \"Response is empty\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/leads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"leads"
									]
								},
								"description": "Returns all leads grouped by source."
							},
							"response": []
						}
					]
				},
				{
					"name": "settings",
					"item": [
						{
							"name": "email",
							"item": [
								{
									"name": "Save email settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains success as true\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
													"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
													"});\r",
													"console.log(\"Full Response Body: \" + pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.get(\"email: \", \"password: \");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sender\": \"{{email}} \",\n  \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/settings/email",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"settings",
												"email"
											]
										},
										"description": "Save and validate email settings. The credentials will be validated before saving.\n- Tests SMTP connection to verify credentials\n- Returns validation errors if credentials are invalid\n"
									},
									"response": []
								},
								{
									"name": "invalid email settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate the status code is 400\r",
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"// Validate the response contains the expected error message\r",
													"pm.test(\"Response contains the expected error message\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"error\");\r",
													"    pm.expect(jsonData.error).to.include(\"Invalid email credentials\");\r",
													"});\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.get(\"email: \", \"password: \");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sender\": \"{{password}} \",\n  \"password\": \"{{email}}\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/settings/email",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"settings",
												"email"
											]
										},
										"description": "Save and validate email settings. The credentials will be validated before saving.\n- Tests SMTP connection to verify credentials\n- Returns validation errors if credentials are invalid\n"
									},
									"response": []
								},
								{
									"name": "missing email settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate the status code is 500\r",
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"// Validate the response contains the expected error message about sender or password\r",
													"pm.test(\"Response contains 'sender' or 'password' error\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"error\");\r",
													"    \r",
													"    const errorMessage = jsonData.error;\r",
													"    pm.expect(\r",
													"        errorMessage.includes(\"Error saving email settings: 'sender'\") || \r",
													"        errorMessage.includes(\"Error saving email settings: 'password'\")\r",
													"    ).to.be.true;\r",
													"});\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/settings/email",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"settings",
												"email"
											]
										},
										"description": "Save and validate email settings. The credentials will be validated before saving.\n- Tests SMTP connection to verify credentials\n- Returns validation errors if credentials are invalid\n"
									},
									"response": []
								}
							]
						},
						{
							"name": "azure",
							"item": [
								{
									"name": "Save Azure settings",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.get(\"endpoint: \", \"api_key: \", \"api_version: \", \"deployment: \", \"embedding_deployment: \");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains success property\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains message property\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"message\");\r",
													"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
													"});\r",
													"console.log(\"Full Response Body: \" + pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"endpoint\": \"{{endpoint}}\",\n  \"api_key\": \"{{api_key}}\",\n  \"api_version\": \"{{api_version}}\",\n  \"deployment\": \"{{deployment}}\",\n  \"embedding_deployment\": \"{{embedding_deployment}}\"  \n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/settings/azure",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"settings",
												"azure"
											]
										},
										"description": "Save and validate Azure OpenAI settings. The credentials will be validated before saving.\n- Tests both embeddings and chat completion connections\n- Returns validation errors if credentials are invalid or services are unreachable\n"
									},
									"response": []
								},
								{
									"name": "invalid Azure settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"// Validate that the response contains an 'error' property\r",
													"pm.test(\"Response contains an error message\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"error\");\r",
													"    pm.expect(jsonData.error).to.include(\"Invalid Azure credentials\");\r",
													"});\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.get(\"endpoint: \", \"api_key: \", \"api_version: \", \"deployment: \", \"embedding_deployment: \");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"endpoint\": \"{{api_key}}\",\n  \"api_key\": \"{{endpoint}}\",\n  \"api_version\": \"{{api_version}}\",\n  \"deployment\": \"{{deployment}}\",\n  \"embedding_deployment\": \"{{embedding_deployment}}\"\n  \n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/settings/azure",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"settings",
												"azure"
											]
										},
										"description": "Save and validate Azure OpenAI settings. The credentials will be validated before saving.\n- Tests both embeddings and chat completion connections\n- Returns validation errors if credentials are invalid or services are unreachable\n"
									},
									"response": []
								},
								{
									"name": "Missing Azure settings",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.get(\"endpoint: \", \"api_key: \", \"api_version: \", \"deployment: \", \"embedding_deployment: \");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate the status code is 400\r",
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"// Validate that the response contains an 'error' property with the expected missing field message\r",
													"pm.test(\"Response contains specific error message for missing Azure field\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\");\r",
													"\r",
													"    // Define the list of fields that can be reported as missing\r",
													"    const azureFields = [\r",
													"        \"endpoint\",\r",
													"        \"api_key\",\r",
													"        \"api_version\",\r",
													"        \"deployment\",\r",
													"        \"embedding_deployment\"\r",
													"    ];\r",
													"\r",
													"    // Check if the error message matches the expected format for any of the fields\r",
													"    const isFieldMissing = azureFields.some(field => \r",
													"        jsonData.error === `Error saving Azure settings: '${field}'`\r",
													"    );\r",
													"\r",
													"    pm.expect(isFieldMissing).to.be.true; // Assert that the message indicates a missing field\r",
													"});\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"endpoint\": \"{{endpoint}}\",\n  \"api_key\": \"{{api_key}}\",\n  \"api_version\": \"{{api_version}}\",\n  \"deployment\": \"{{deployment}}\"\n  \n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/settings/azure",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"settings",
												"azure"
											]
										},
										"description": "Save and validate Azure OpenAI settings. The credentials will be validated before saving.\n- Tests both embeddings and chat completion connections\n- Returns validation errors if credentials are invalid or services are unreachable\n"
									},
									"response": []
								}
							]
						},
						{
							"name": "private-link",
							"item": [
								{
									"name": "Save private link config",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Status Code Check\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Check that the Content-Type header exists and matches the expected pattern\r",
													"pm.test(\"Response is JSON\", function () {\r",
													"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
													"    pm.expect(contentType).to.match(/application\\/json/);\r",
													"});\r",
													"\r",
													"// Defensive JSON parsing\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"\r",
													"    // Success must be true\r",
													"    pm.test(\"Response has success true\", function () {\r",
													"        pm.expect(jsonData.success).to.eql(true);\r",
													"    });\r",
													"\r",
													"    // Message should be present\r",
													"    pm.test(\"Response contains message\", function () {\r",
													"        pm.expect(jsonData.message).to.be.a(\"string\");\r",
													"    });\r",
													"\r",
													"} catch (e) {\r",
													"    console.warn(\"Response is not JSON: \" + pm.response.text());\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Get environment variables correctly\r",
													"const base = pm.environment.get(\"link_base\");\r",
													"const path = pm.environment.get(\"link_path\");\r",
													"\r",
													"// Log the values to verify\r",
													"console.log(\"Base URL:\", base);\r",
													"console.log(\"Path:\", path);\r",
													"\r",
													"// Set the request body\r",
													"pm.variables.set(\"requestBody\", JSON.stringify({\r",
													"    \"base\": base,\r",
													"    \"path\": path\r",
													"}));\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"base\": \"{{link_base}}\",\n  \"path\": \"{{link_path}}\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/settings/private-link",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"settings",
												"private-link"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "company_info",
					"item": [
						{
							"name": "Set company info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status code should be 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Response should be JSON\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Check success flag and message\r",
											"let jsonData = pm.response.json();\r",
											"pm.test(\"Response indicates success\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
											"    // pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"info\": \"Caze Labs is a software company in India developing Bizcon and HireSense.\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/company_info",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"company_info"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get company info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status code should be 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Response should be JSON\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Response should be an object (schema allows any properties)\r",
											"let jsonData = pm.response.json();\r",
											"pm.test(\"Response is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"//Check that 'info' property exists and is not empty\r",
											"pm.test(\"Response has 'info' property and it is not empty\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"info\").that.is.a(\"string\").and.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/company_info",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"company_info"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid company info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status code should be 400\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Check error message\r",
											"let jsonData = pm.response.json();\r",
											"pm.test(\"Error message is provided\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/company_info",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"company_info"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "products",
					"item": [
						{
							"name": "Set products for  company info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test: Status should be 200 OK\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test: Response should be JSON\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test: Response indicates success and returns products\r",
											"// let jsonData = pm.response.json();\r",
											"// pm.test(\"Response indicates success\", function () {\r",
											"//     pm.expect(jsonData).to.have.property(\"success\", true);\r",
											"//     pm.expect(jsonData).to.have.property(\"products\").that.is.an(\"array\").with.length.above(0);\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"products\": [\n    \"Bizcon\",\n    \"HireSense\",\n    \"AI Cost \"\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Extract product from  company info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test: Status should be 200 OK\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test: Response should be JSON\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test: Response indicates success and extracted products\r",
											"let jsonData = pm.response.json();\r",
											"pm.test(\"Response indicates extracted products\", function () {\r",
											"    // pm.expect(jsonData).to.have.property(\"success\", true);\r",
											"    pm.expect(jsonData).to.have.property(\"products\").that.is.an(\"array\").with.length.above(0);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"extract\": true,\n  \"company_info\": \"We offer Bizcon Hiresense products\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test: Status should be 200 OK\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test: Response should be JSON\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test: Response has 'products' array\r",
											"let jsonData = pm.response.json();\r",
											"pm.test(\"Response contains products array\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"products\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Products array is not empty\", function () {\r",
											"    pm.expect(jsonData.products.length).to.be.above(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "responsible_person",
					"item": [
						{
							"name": "get responsible prson without info uploaded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/responsible_person",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"responsible_person"
									],
									"query": [
										{
											"key": "product_name",
											"value": "",
											"description": "(Required) Name of the product",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set responsible person for a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test: Status code should be 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test: Response is JSON\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test: Check success flag\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response contains success flag\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/api/products'),\r",
											"    method: 'GET'\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.error(\"Error fetching products:\", err);\r",
											"    } else {\r",
											"        let jsonData = res.json();\r",
											"        if (jsonData.products && jsonData.products.length > 0) {\r",
											"            let productName = jsonData.products[0];\r",
											"            pm.environment.set(\"product_name\", productName);\r",
											"            console.log(\"✅ Product name set to:\", productName);\r",
											"        } else {\r",
											"            console.error(\"❌ No products found to set.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"product_name\": \"{{product_name}}\",\n  \"person\": {\n    \"name\": \"Anu\",\n    \"email\": \"sonacaze@gmail.com\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/responsible_person",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"responsible_person"
									]
								}
							},
							"response": []
						},
						{
							"name": "missing info of responsible person",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"product_name\": \"Bizcon\",\n  \"person\": {\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/responsible_person",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"responsible_person"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get responsible person for a product",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"baseUrl\") + \"/api/products\",\r",
											"    method: 'GET'\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.error(\"Error fetching products:\", err);\r",
											"    } else {\r",
											"        let jsonData = res.json();\r",
											"\r",
											"        if (jsonData.products && Array.isArray(jsonData.products) && jsonData.products.length > 0) {\r",
											"            let firstProduct = jsonData.products[0]; // Get the first product name\r",
											"            pm.environment.set(\"product_name\", firstProduct);\r",
											"            console.log(\"Product name set:\", firstProduct);\r",
											"        } else {\r",
											"            console.error(\"No products found in response\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test: Status code should be 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test: Response is JSON\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test: Response structure\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response contains name and email\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"email\").that.is.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/responsible_person?product_name={{product_name}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"responsible_person"
									],
									"query": [
										{
											"key": "product_name",
											"value": "{{product_name}}",
											"description": "(Required) Name of the product"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "send_emails",
					"item": [
						{
							"name": "Send emails to selected leads",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/api/leads'),\r",
											"    method: 'GET'\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.error(\"Error fetching leads:\", err);\r",
											"    } else {\r",
											"        var jsonData = res.json();\r",
											"\r",
											"        // Get the first key in the response (like \"lead.xlsx\")\r",
											"        var fileKey = Object.keys(jsonData)[0];\r",
											"\r",
											"        // Get the first lead from that key\r",
											"        if (jsonData[fileKey] && jsonData[fileKey].length > 0) {\r",
											"            var firstLead = jsonData[fileKey][0];\r",
											"\r",
											"            // Store the lead ID in environment variable\r",
											"            pm.environment.set(\"lead_id\", firstLead.id);\r",
											"            console.log(\"Lead ID saved:\", firstLead.id);\r",
											"        } else {\r",
											"            console.error(\"No leads found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test: Validate HTTP status and Content-Type header\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
											"    pm.expect(contentType).to.match(/application\\/json/);\r",
											"});\r",
											"\r",
											"// Parse response JSON\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"// Validate overall response structure\r",
											"pm.test(\"Response has valid structure\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData).to.have.property(\"success\").that.is.a(\"boolean\");\r",
											"    pm.expect(jsonData).to.have.property(\"results\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Validate each result object in the results array\r",
											"pm.test(\"Each result object follows the expected schema\", function () {\r",
											"    // Allowed status values as per Swagger enum for send_emails\r",
											"    const allowedStatus = [\"sent\", \"error\", \"cooldown\", \"no_content\", \"embedding_error\", \"llm_error\"];\r",
											"    jsonData.results.forEach((result, index) => {\r",
											"        pm.expect(result).to.be.an(\"object\");\r",
											"        // Check id property - must be a string\r",
											"        pm.expect(result).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        // Check status property - must be a string and one of the allowed enum values\r",
											"        pm.expect(result).to.have.property(\"status\").that.is.a(\"string\");\r",
											"        pm.expect(allowedStatus).to.contain(result.status);\r",
											"        \r",
											"        // Check error property - can be null or if not null should be a non-empty string\r",
											"       if (result.hasOwnProperty(\"error\") && result.error !== null) {\r",
											"            pm.expect(result.error).to.be.a(\"string\").and.to.have.length.above(0);\r",
											"        }\r",
											"    });\r",
											"});\r",
											"\r",
											"console.log(\"Full Response Body: \" + pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"lead_ids\": [\n    \"{{lead_id}}\"\n  ]\n  \n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/send_emails",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"send_emails"
									]
								}
							},
							"response": []
						},
						{
							"name": "missing/no lead id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"400 ErrorResponse schema is valid\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    // Verify that the \"error\" property exists, is of type string, and is non-empty\r",
											"    pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.error.length).to.be.above(0);\r",
											"});\r",
											"\r",
											"console.log(\"Full Response Body: \" + pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"lead_ids\": [\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/send_emails",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"send_emails"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "user_chat",
					"item": [
						{
							"name": "{uuid}",
							"item": [
								{
									"name": "Send a message in the user chat",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Pre-request Script\r",
													"pm.sendRequest({\r",
													"    url: 'http://35.207.254.19:5000/api/report',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.error(err);\r",
													"    } else {\r",
													"        var jsonData = res.json();\r",
													"        if (jsonData.leads && jsonData.leads.length > 0) {\r",
													"            // Get the first lead's UUID\r",
													"            var firstLead = jsonData.leads[0];\r",
													"            // Store it in environment variable\r",
													"            pm.environment.set(\"lead_uuid\", firstLead.ID);\r",
													"            console.log(\"UUID set:\", firstLead.ID);\r",
													"        } else {\r",
													"            console.error(\"No leads found in report\");\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Verify status code is 200\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Verify Content-Type header indicates JSON\r",
													"pm.test(\"Response is JSON\", function () {\r",
													"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
													"    pm.expect(contentType).to.match(/application\\/json/);\r",
													"});\r",
													"\r",
													"// Parse JSON response\r",
													"const postData = pm.response.json();\r",
													"\r",
													"// Validate that the response object has the \"response\" property with a string value (the AI response)\r",
													"pm.test(\"Chat response is valid\", function () {\r",
													"    pm.expect(postData).to.be.an(\"object\");\r",
													"    pm.expect(postData).to.have.property(\"response\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"message\": \"which challenges you are facing\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user_chat/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user_chat",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid",
													"value": "{{lead_uuid}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "No message provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Expect status code to be 400\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"// Parse error response\r",
													"const errorPostData = pm.response.json();\r",
													"\r",
													"// Validate ErrorResponse schema\r",
													"pm.test(\"Error response is valid\", function () {\r",
													"    pm.expect(errorPostData).to.be.an(\"object\");\r",
													"    pm.expect(errorPostData).to.have.property(\"error\").that.is.a(\"string\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Pre-request Script for Mark Lead API and Chat History API\r",
													"pm.sendRequest({\r",
													"    url: 'http://35.207.254.19:5000/api/report',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.error(err);\r",
													"    } else {\r",
													"        var jsonData = res.json();\r",
													"        if (jsonData.leads && jsonData.leads.length > 0) {\r",
													"            // Get the first lead's UUID\r",
													"            var firstLead = jsonData.leads[0];\r",
													"            // Store it in environment variable\r",
													"            pm.environment.set(\"lead_uuid\", firstLead.ID);\r",
													"            console.log(\"UUID set:\", firstLead.ID);\r",
													"        } else {\r",
													"            console.error(\"No leads found in report\");\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user_chat/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user_chat",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid",
													"value": "{{lead_uuid}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get chat history for a user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Verify status code is 200\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Verify Content-Type header\r",
													"pm.test(\"Response is JSON\", function () {\r",
													"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
													"    pm.expect(contentType).to.match(/application\\/json/);\r",
													"});\r",
													"\r",
													"// Parse JSON response\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"// Check if response has an 'error' field\r",
													"if (jsonData.error) {\r",
													"    console.error(\"API returned an error:\", jsonData.error);\r",
													"    pm.test(\"Response should not contain an error\", function () {\r",
													"        pm.expect.fail(\"Error in response: \" + jsonData.error);\r",
													"    });\r",
													"} else {\r",
													"    // Check that response has 'history' array\r",
													"    pm.test(\"Response has a valid structure\", function () {\r",
													"        pm.expect(jsonData).to.be.an(\"object\");\r",
													"        pm.expect(jsonData).to.have.property(\"history\").that.is.an(\"array\");\r",
													"    });\r",
													"\r",
													"    // Validate each chat message\r",
													"    jsonData.history.forEach((msg, index) => {\r",
													"        pm.test(`Chat message ${index + 1} has valid properties`, function () {\r",
													"            pm.expect(msg).to.be.an(\"object\");\r",
													"            pm.expect(msg).to.have.property(\"role\").that.is.a(\"string\").and.to.satisfy((role) => {\r",
													"                return [\"user\", \"ai\"].includes(role);\r",
													"            });\r",
													"            pm.expect(msg).to.have.property(\"message\").that.is.a(\"string\");\r",
													"            // pm.expect(msg).to.have.property(\"timestamp\").that.is.a(\"string\");\r",
													"        });\r",
													"    });\r",
													"}\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Pre-request Script for Mark Lead API and Chat History API\r",
													"pm.sendRequest({\r",
													"    url: 'http://35.207.254.19:5000/api/report',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.error(err);\r",
													"    } else {\r",
													"        var jsonData = res.json();\r",
													"        if (jsonData.leads && jsonData.leads.length > 0) {\r",
													"            // Get the first lead's UUID\r",
													"            var firstLead = jsonData.leads[0];\r",
													"            // Store it in environment variable\r",
													"            pm.environment.set(\"lead_uuid\", firstLead.ID);\r",
													"            console.log(\"UUID set:\", firstLead.ID);\r",
													"        } else {\r",
													"            console.error(\"No leads found in report\");\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/user_chat/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user_chat",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid",
													"value": "{{lead_uuid}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid/expired chat link",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Verify status code is 404\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"// Parse JSON error response\r",
													"const errorData = pm.response.json();\r",
													"\r",
													"// Validate that the ErrorResponse schema is met (should contain an \"error\" property)\r",
													"pm.test(\"Error response has a valid structure\", function () {\r",
													"    pm.expect(errorData).to.be.an(\"object\");\r",
													"    pm.expect(errorData).to.have.property(\"error\").that.is.a(\"string\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"console.log(\"Full Response Body: \" + pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Pre-request Script for Mark Lead API and Chat History API\r",
													"pm.sendRequest({\r",
													"    url: 'http://35.207.254.19:5000/api/report',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.error(err);\r",
													"    } else {\r",
													"        var jsonData = res.json();\r",
													"        if (jsonData.leads && jsonData.leads.length > 0) {\r",
													"            // Get the first lead's UUID\r",
													"            var firstLead = jsonData.leads[0];\r",
													"            // Store it in environment variable\r",
													"            pm.environment.set(\"lead_uuid\", firstLead.ID);\r",
													"            console.log(\"UUID set:\", firstLead.ID);\r",
													"        } else {\r",
													"            console.error(\"No leads found in report\");\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/user_chat/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user_chat",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid",
													"value": "lead - 1",
													"description": "(Required) "
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "report",
					"item": [
						{
							"name": "Get lead engagement report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that the response status is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Check that the response Content-Type header indicates JSON\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
											"    pm.expect(contentType).to.match(/application\\/json/);\r",
											"});\r",
											"\r",
											"// Parse the JSON response\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"// Validate that the response is an object with a \"leads\" array\r",
											"pm.test(\"Response has a valid structure\", function () {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData).to.have.property(\"leads\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Leads array should not be empty\", function () {\r",
											"    pm.expect(jsonData.leads.length, \"Leads array is empty\").to.be.above(0);\r",
											"});\r",
											"\r",
											"// Helper function to allow a value to be either a string or null\r",
											"function expectStringOrNull(value) {\r",
											"    pm.expect(value === null || typeof value === \"string\").to.be.true;\r",
											"}\r",
											"\r",
											"// Validate each lead in the \"leads\" array\r",
											"jsonData.leads.forEach((lead, index) => {\r",
											"    pm.test(`Lead ${index + 1} has the expected schema`, function () {\r",
											"        pm.expect(lead).to.have.property(\"Name\").that.is.a(\"string\");\r",
											"        pm.expect(lead).to.have.property(\"Company\").that.is.a(\"string\");\r",
											"        pm.expect(lead).to.have.property(\"Email\").that.is.a(\"string\");\r",
											"        pm.expect(lead).to.have.property(\"ID\").that.is.a(\"string\");\r",
											"        pm.expect(lead).to.have.property(\"Sent Date\").that.is.a(\"string\");\r",
											"        pm.expect(lead).to.have.property(\"Private Link\").that.is.a(\"string\");\r",
											"        pm.expect(lead).to.have.property(\"source\").that.is.a(\"string\");\r",
											"        pm.expect(lead).to.have.property(\"Description\").that.is.a(\"string\");\r",
											"\r",
											"        pm.expect(lead).to.have.property(\"Chat Summary\");\r",
											"        expectStringOrNull(lead[\"Chat Summary\"]);\r",
											"\r",
											"        pm.expect(lead).to.have.property(\"Connected\").that.is.a(\"boolean\");\r",
											"\r",
											"        pm.expect(lead).to.have.property(\"Status (Hot/Warm/Cold/Not Responded)\").that.is.a(\"string\");\r",
											"\r",
											"        const allowedStatus = [\"hot\", \"warm\", \"cold\", \"not responded\"];\r",
											"        pm.expect(\r",
											"            allowedStatus\r",
											"        ).to.include(lead[\"Status (Hot/Warm/Cold/Not Responded)\"].toLowerCase());\r",
											"    });\r",
											"});\r",
											"\r",
											"console.log(\"Full Response Body: \" + pm.response.text());\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/report",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"report"
									]
								},
								"description": "Returns the full report with all leads, statuses, and private links."
							},
							"response": []
						}
					]
				},
				{
					"name": "default_responsible_person",
					"item": [
						{
							"name": "Set the default responsible person",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has success and message\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
											"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Anu\",\n  \"email\": \"sonacaze@gmail.com\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/settings/default_responsible_person",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"settings",
										"default_responsible_person"
									]
								},
								"description": "Sets the default responsible person's name and email."
							},
							"response": []
						},
						{
							"name": "Get the default responsible person",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test: Status should be 200 OK\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test: Response is JSON\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
											"    pm.expect(contentType).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Test: Structure of the response\r",
											"pm.test(\"Response has 'name' and 'email'\", function () {\r",
											"    pm.expect(response).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"email\").that.is.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/settings/default_responsible_person",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"settings",
										"default_responsible_person"
									]
								},
								"description": "Returns the default responsible person's name and email."
							},
							"response": []
						}
					]
				},
				{
					"name": "clear-all",
					"item": [
						{
							"name": "Clear all data (chats, files, and leads)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Postman Test Script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has message property\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"});\r",
											"\r",
											"pm.test(\"Success response structure\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    if (jsonData.success === true) {\r",
											"        pm.expect(jsonData.message).to.eql(\"All data cleared successfully\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Error response structure\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    if (jsonData.success === false) {\r",
											"        pm.expect(jsonData).to.have.property('message');\r",
											"        pm.expect(jsonData.message).to.include(\"Failed to clear data\");\r",
											"    }\r",
											"});\r",
											"\r",
											"console.log(\"Full Response Body: \" + pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/clear-all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"clear-all"
									]
								},
								"description": "Clears all stored data including chat histories, uploaded files, and lead information"
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000"
		}
	]
}